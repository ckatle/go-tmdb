// Package tmdb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package tmdb

import (
	"encoding/json"
	"errors"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for MediaType.
const (
	MediaTypeMovie  MediaType = "movie"
	MediaTypePerson MediaType = "person"
	MediaTypeTv     MediaType = "tv"
)

// CastListItem defines model for CastListItem.
type CastListItem struct {
	Adult              *bool    `json:"adult,omitempty"`
	CastId             *int     `json:"cast_id,omitempty"`
	Character          *string  `json:"character,omitempty"`
	CreditId           *string  `json:"credit_id,omitempty"`
	Gender             *int     `json:"gender,omitempty"`
	Id                 int      `json:"id"`
	KnownForDepartment *string  `json:"known_for_department,omitempty"`
	Name               string   `json:"name"`
	Order              *int     `json:"order,omitempty"`
	OriginalName       *string  `json:"original_name,omitempty"`
	Popularity         *float32 `json:"popularity,omitempty"`
	ProfilePath        *string  `json:"profile_path,omitempty"`
}

// Company defines model for Company.
type Company struct {
	Description   *string `json:"description,omitempty"`
	Headquarters  *string `json:"headquarters,omitempty"`
	Homepage      *string `json:"homepage,omitempty"`
	Id            int32   `json:"id"`
	LogoPath      *string `json:"logo_path,omitempty"`
	Name          string  `json:"name"`
	OriginCountry *string `json:"origin_country,omitempty"`
}

// CompanyLogo defines model for CompanyLogo.
type CompanyLogo struct {
	AspectRatio *float32 `json:"aspect_ratio,omitempty"`
	FilePath    *string  `json:"file_path,omitempty"`
	FileType    *string  `json:"file_type,omitempty"`
	Height      *int     `json:"height,omitempty"`
	Id          *string  `json:"id,omitempty"`
	VoteAverage *float32 `json:"vote_average,omitempty"`
	VoteCount   *int     `json:"vote_count,omitempty"`
	Width       *int     `json:"width,omitempty"`
}

// Country defines model for Country.
type Country struct {
	EnglishName string `json:"english_name"`

	// Iso31661 ISO 3166-1 tag
	Iso31661   string  `json:"iso_3166_1"`
	NativeName *string `json:"native_name,omitempty"`
}

// CountryWithTimezones defines model for CountryWithTimezones.
type CountryWithTimezones struct {
	// Iso31661 ISO 3166-1 tag
	Iso31661 string   `json:"iso_3166_1"`
	Zones    []string `json:"zones"`
}

// Credits defines model for Credits.
type Credits struct {
	Cast []CastListItem `json:"cast"`
	Crew []CrewListItem `json:"crew"`
	Id   *int           `json:"id,omitempty"`
}

// CrewListItem defines model for CrewListItem.
type CrewListItem struct {
	Adult              *bool    `json:"adult,omitempty"`
	CreditId           *string  `json:"credit_id,omitempty"`
	Department         *string  `json:"department,omitempty"`
	Gender             *int     `json:"gender,omitempty"`
	Id                 int      `json:"id"`
	Job                *string  `json:"job,omitempty"`
	KnownForDepartment *string  `json:"known_for_department,omitempty"`
	Name               string   `json:"name"`
	OriginalName       *string  `json:"original_name,omitempty"`
	Popularity         *float32 `json:"popularity,omitempty"`
	ProfilePath        *string  `json:"profile_path,omitempty"`
}

// Department defines model for Department.
type Department struct {
	// Department The name of the department
	Department string   `json:"department"`
	Jobs       []string `json:"jobs"`
}

// Error defines model for Error.
type Error struct {
	StatusCode    int32  `json:"status_code"`
	StatusMessage string `json:"status_message"`
	Success       bool   `json:"success"`
}

// Language defines model for Language.
type Language struct {
	EnglishName string `json:"english_name"`

	// Iso6391 ISO 3166-1 tag
	Iso6391 string  `json:"iso_639_1"`
	Name    *string `json:"name,omitempty"`
}

// Media defines model for Media.
type Media struct {
	MediaType MediaType `json:"media_type"`
}

// MediaType defines model for Media.media_type.
type MediaType string

// MovieListItem defines model for MovieListItem.
type MovieListItem struct {
	Adult            *bool    `json:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         *[]int32 `json:"genre_ids,omitempty"`
	Id               int      `json:"id"`
	OriginalLanguage string   `json:"original_language"`
	OriginalTitle    string   `json:"original_title"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float32 `json:"popularity,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            string   `json:"title"`
	Video            *bool    `json:"video,omitempty"`
	VoteAverage      *float32 `json:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty"`
}

// MovieListItemWithMediaType defines model for MovieListItemWithMediaType.
type MovieListItemWithMediaType struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	MediaType        MediaType `json:"media_type"`
	OriginalLanguage string    `json:"original_language"`
	OriginalTitle    string    `json:"original_title"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	ReleaseDate      *string   `json:"release_date,omitempty"`
	Title            string    `json:"title"`
	Video            *bool     `json:"video,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// MovieListPage defines model for MovieListPage.
type MovieListPage struct {
	Page         int32           `json:"page"`
	Results      []MovieListItem `json:"results"`
	TotalPages   int32           `json:"total_pages"`
	TotalResults int32           `json:"total_results"`
}

// MovieListPageWithDates defines model for MovieListPageWithDates.
type MovieListPageWithDates struct {
	Dates struct {
		Maximum openapi_types.Date `json:"maximum"`
		Minimum openapi_types.Date `json:"minimum"`
	} `json:"dates"`
	Page         int32           `json:"page"`
	Results      []MovieListItem `json:"results"`
	TotalPages   int32           `json:"total_pages"`
	TotalResults int32           `json:"total_results"`
}

// MultiListPage defines model for MultiListPage.
type MultiListPage struct {
	Page         int32                        `json:"page"`
	Results      []MultiListPage_Results_Item `json:"results"`
	TotalPages   int32                        `json:"total_pages"`
	TotalResults int32                        `json:"total_results"`
}

// MultiListPage_Results_Item defines model for MultiListPage.results.Item.
type MultiListPage_Results_Item struct {
	union json.RawMessage
}

// Object defines model for Object.
type Object struct {
	Id   int32  `json:"id"`
	Name string `json:"name"`
}

// ObjectListPage defines model for ObjectListPage.
type ObjectListPage struct {
	Page         int32    `json:"page"`
	Results      []Object `json:"results"`
	TotalPages   int32    `json:"total_pages"`
	TotalResults int32    `json:"total_results"`
}

// Page defines model for Page.
type Page struct {
	Page         int32 `json:"page"`
	TotalPages   int32 `json:"total_pages"`
	TotalResults int32 `json:"total_results"`
}

// PersonListItem defines model for PersonListItem.
type PersonListItem struct {
	Adult              *bool                           `json:"adult,omitempty"`
	Gender             *int32                          `json:"gender,omitempty"`
	Id                 int                             `json:"id"`
	KnownFor           *[]PersonListItem_KnownFor_Item `json:"known_for,omitempty"`
	KnownForDepartment *string                         `json:"known_for_department,omitempty"`
	Name               string                          `json:"name"`
	OriginalName       string                          `json:"original_name"`
	Popularity         *float32                        `json:"popularity,omitempty"`
	ProfilePath        *string                         `json:"profile_path,omitempty"`
}

// PersonListItem_KnownFor_Item defines model for PersonListItem.known_for.Item.
type PersonListItem_KnownFor_Item struct {
	union json.RawMessage
}

// PersonListItemWithMediaType defines model for PersonListItemWithMediaType.
type PersonListItemWithMediaType struct {
	Adult              *bool                                        `json:"adult,omitempty"`
	Gender             *int32                                       `json:"gender,omitempty"`
	Id                 int                                          `json:"id"`
	KnownFor           *[]PersonListItemWithMediaType_KnownFor_Item `json:"known_for,omitempty"`
	KnownForDepartment *string                                      `json:"known_for_department,omitempty"`
	MediaType          MediaType                                    `json:"media_type"`
	Name               string                                       `json:"name"`
	OriginalName       string                                       `json:"original_name"`
	Popularity         *float32                                     `json:"popularity,omitempty"`
	ProfilePath        *string                                      `json:"profile_path,omitempty"`
}

// PersonListItemWithMediaType_KnownFor_Item defines model for PersonListItemWithMediaType.known_for.Item.
type PersonListItemWithMediaType_KnownFor_Item struct {
	union json.RawMessage
}

// PersonListPage defines model for PersonListPage.
type PersonListPage struct {
	Page         int32            `json:"page"`
	Results      []PersonListItem `json:"results"`
	TotalPages   int32            `json:"total_pages"`
	TotalResults int32            `json:"total_results"`
}

// TvListItem defines model for TvListItem.
type TvListItem struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	FirstAirDate     *string   `json:"first_air_date,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	Name             string    `json:"name"`
	OriginCountry    *[]string `json:"origin_country,omitempty"`
	OriginalLanguage string    `json:"original_language"`
	OriginalName     string    `json:"original_name"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// TvListItemWithMediaType defines model for TvListItemWithMediaType.
type TvListItemWithMediaType struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	FirstAirDate     *string   `json:"first_air_date,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	MediaType        MediaType `json:"media_type"`
	Name             string    `json:"name"`
	OriginCountry    *[]string `json:"origin_country,omitempty"`
	OriginalLanguage string    `json:"original_language"`
	OriginalName     string    `json:"original_name"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// TvListPage defines model for TvListPage.
type TvListPage struct {
	Page         int32        `json:"page"`
	Results      []TvListItem `json:"results"`
	TotalPages   int32        `json:"total_pages"`
	TotalResults int32        `json:"total_results"`
}

// CompanyID defines model for CompanyID.
type CompanyID = int32

// IncludeAdult defines model for IncludeAdult.
type IncludeAdult = bool

// KeywordID defines model for KeywordID.
type KeywordID = int32

// LanguageParam defines model for LanguageParam.
type LanguageParam = string

// MovieID defines model for MovieID.
type MovieID = int32

// PageParam defines model for PageParam.
type PageParam = int32

// PrimaryReleaseYear defines model for PrimaryReleaseYear.
type PrimaryReleaseYear = int32

// Query defines model for Query.
type Query = string

// Region defines model for Region.
type Region = string

// SeriesID defines model for SeriesID.
type SeriesID = int32

// Year defines model for Year.
type Year = string

// InvalidPage defines model for InvalidPage.
type InvalidPage = Error

// NotFound defines model for NotFound.
type NotFound = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ConfigurationCountriesParams defines parameters for ConfigurationCountries.
type ConfigurationCountriesParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreMovieListParams defines parameters for GenreMovieList.
type GenreMovieListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreTvListParams defines parameters for GenreTvList.
type GenreTvListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// KeywordMoviesParams defines parameters for KeywordMovies.
type KeywordMoviesParams struct {
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// MovieNowPlayingListParams defines parameters for MovieNowPlayingList.
type MovieNowPlayingListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MoviePopularListParams defines parameters for MoviePopularList.
type MoviePopularListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieTopRatedListParams defines parameters for MovieTopRatedList.
type MovieTopRatedListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieUpcomingListParams defines parameters for MovieUpcomingList.
type MovieUpcomingListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieCreditsParams defines parameters for MovieCredits.
type MovieCreditsParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// MovieSimilarParams defines parameters for MovieSimilar.
type MovieSimilarParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchKeywordParams defines parameters for SearchKeyword.
type SearchKeywordParams struct {
	Query Query      `form:"query" json:"query"`
	Page  *PageParam `form:"page,omitempty" json:"page,omitempty"`
}

// SearchMovieParams defines parameters for SearchMovie.
type SearchMovieParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language           *LanguageParam      `form:"language,omitempty" json:"language,omitempty"`
	PrimaryReleaseYear *PrimaryReleaseYear `form:"primary_release_year,omitempty" json:"primary_release_year,omitempty"`
	Page               *PageParam          `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
	Year   *Year   `form:"year,omitempty" json:"year,omitempty"`
}

// SearchMultiParams defines parameters for SearchMulti.
type SearchMultiParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchPersonParams defines parameters for SearchPerson.
type SearchPersonParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchTVParams defines parameters for SearchTV.
type SearchTVParams struct {
	Query            Query         `form:"query" json:"query"`
	FirstAirDateYear *string       `form:"first_air_date_year,omitempty" json:"first_air_date_year,omitempty"`
	IncludeAdult     *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
	Year     *Year          `form:"year,omitempty" json:"year,omitempty"`
}

// TvSeriesCreditsParams defines parameters for TvSeriesCredits.
type TvSeriesCreditsParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// AsMovieListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a MovieListItemWithMediaType
func (t MultiListPage_Results_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided MovieListItemWithMediaType
func (t *MultiListPage_Results_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided MovieListItemWithMediaType
func (t *MultiListPage_Results_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPersonListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a PersonListItemWithMediaType
func (t MultiListPage_Results_Item) AsPersonListItemWithMediaType() (PersonListItemWithMediaType, error) {
	var body PersonListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPersonListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided PersonListItemWithMediaType
func (t *MultiListPage_Results_Item) FromPersonListItemWithMediaType(v PersonListItemWithMediaType) error {
	v.MediaType = "person"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePersonListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided PersonListItemWithMediaType
func (t *MultiListPage_Results_Item) MergePersonListItemWithMediaType(v PersonListItemWithMediaType) error {
	v.MediaType = "person"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a TvListItemWithMediaType
func (t MultiListPage_Results_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided TvListItemWithMediaType
func (t *MultiListPage_Results_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided TvListItemWithMediaType
func (t *MultiListPage_Results_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MultiListPage_Results_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t MultiListPage_Results_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "person":
		return t.AsPersonListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t MultiListPage_Results_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MultiListPage_Results_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMovieListItemWithMediaType returns the union data inside the PersonListItem_KnownFor_Item as a MovieListItemWithMediaType
func (t PersonListItem_KnownFor_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the PersonListItem_KnownFor_Item as the provided MovieListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the PersonListItem_KnownFor_Item, using the provided MovieListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the PersonListItem_KnownFor_Item as a TvListItemWithMediaType
func (t PersonListItem_KnownFor_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the PersonListItem_KnownFor_Item as the provided TvListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the PersonListItem_KnownFor_Item, using the provided TvListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonListItem_KnownFor_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PersonListItem_KnownFor_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PersonListItem_KnownFor_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonListItem_KnownFor_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMovieListItemWithMediaType returns the union data inside the PersonListItemWithMediaType_KnownFor_Item as a MovieListItemWithMediaType
func (t PersonListItemWithMediaType_KnownFor_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the PersonListItemWithMediaType_KnownFor_Item as the provided MovieListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the PersonListItemWithMediaType_KnownFor_Item, using the provided MovieListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the PersonListItemWithMediaType_KnownFor_Item as a TvListItemWithMediaType
func (t PersonListItemWithMediaType_KnownFor_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the PersonListItemWithMediaType_KnownFor_Item as the provided TvListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the PersonListItemWithMediaType_KnownFor_Item, using the provided TvListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonListItemWithMediaType_KnownFor_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PersonListItemWithMediaType_KnownFor_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PersonListItemWithMediaType_KnownFor_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonListItemWithMediaType_KnownFor_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
