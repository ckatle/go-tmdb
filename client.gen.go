// Package tmdb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package tmdb

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for MediaType.
const (
	MediaTypeMovie  MediaType = "movie"
	MediaTypePerson MediaType = "person"
	MediaTypeTv     MediaType = "tv"
)

// Company defines model for Company.
type Company struct {
	Description   *string `json:"description,omitempty"`
	Headquarters  *string `json:"headquarters,omitempty"`
	Homepage      *string `json:"homepage,omitempty"`
	Id            int32   `json:"id"`
	LogoPath      *string `json:"logo_path,omitempty"`
	Name          string  `json:"name"`
	OriginCountry *string `json:"origin_country,omitempty"`
}

// CompanyLogo defines model for CompanyLogo.
type CompanyLogo struct {
	AspectRatio *float32 `json:"aspect_ratio,omitempty"`
	FilePath    *string  `json:"file_path,omitempty"`
	FileType    *string  `json:"file_type,omitempty"`
	Height      *int     `json:"height,omitempty"`
	Id          *string  `json:"id,omitempty"`
	VoteAverage *float32 `json:"vote_average,omitempty"`
	VoteCount   *int     `json:"vote_count,omitempty"`
	Width       *int     `json:"width,omitempty"`
}

// Country defines model for Country.
type Country struct {
	EnglishName string `json:"english_name"`

	// Iso31661 ISO 3166-1 tag
	Iso31661   string  `json:"iso_3166_1"`
	NativeName *string `json:"native_name,omitempty"`
}

// CountryWithTimezones defines model for CountryWithTimezones.
type CountryWithTimezones struct {
	// Iso31661 ISO 3166-1 tag
	Iso31661 string   `json:"iso_3166_1"`
	Zones    []string `json:"zones"`
}

// Department defines model for Department.
type Department struct {
	// Department The name of the department
	Department string   `json:"department"`
	Jobs       []string `json:"jobs"`
}

// Error defines model for Error.
type Error struct {
	StatusCode    int32  `json:"status_code"`
	StatusMessage string `json:"status_message"`
	Success       bool   `json:"success"`
}

// Language defines model for Language.
type Language struct {
	EnglishName string `json:"english_name"`

	// Iso6391 ISO 3166-1 tag
	Iso6391 string  `json:"iso_639_1"`
	Name    *string `json:"name,omitempty"`
}

// Media defines model for Media.
type Media struct {
	MediaType MediaType `json:"media_type"`
}

// MediaType defines model for Media.media_type.
type MediaType string

// MovieListItem defines model for MovieListItem.
type MovieListItem struct {
	Adult            *bool    `json:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         *[]int32 `json:"genre_ids,omitempty"`
	Id               int      `json:"id"`
	OriginalLanguage string   `json:"original_language"`
	OriginalTitle    string   `json:"original_title"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float32 `json:"popularity,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            string   `json:"title"`
	Video            *bool    `json:"video,omitempty"`
	VoteAverage      *float32 `json:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty"`
}

// MovieListItemWithMediaType defines model for MovieListItemWithMediaType.
type MovieListItemWithMediaType struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	MediaType        MediaType `json:"media_type"`
	OriginalLanguage string    `json:"original_language"`
	OriginalTitle    string    `json:"original_title"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	ReleaseDate      *string   `json:"release_date,omitempty"`
	Title            string    `json:"title"`
	Video            *bool     `json:"video,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// MovieListPage defines model for MovieListPage.
type MovieListPage struct {
	Page         int32           `json:"page"`
	Results      []MovieListItem `json:"results"`
	TotalPages   int32           `json:"total_pages"`
	TotalResults int32           `json:"total_results"`
}

// MovieListPageWithDates defines model for MovieListPageWithDates.
type MovieListPageWithDates struct {
	Dates struct {
		Maximum openapi_types.Date `json:"maximum"`
		Minimum openapi_types.Date `json:"minimum"`
	} `json:"dates"`
	Page         int32           `json:"page"`
	Results      []MovieListItem `json:"results"`
	TotalPages   int32           `json:"total_pages"`
	TotalResults int32           `json:"total_results"`
}

// MultiListPage defines model for MultiListPage.
type MultiListPage struct {
	Page         int32                        `json:"page"`
	Results      []MultiListPage_Results_Item `json:"results"`
	TotalPages   int32                        `json:"total_pages"`
	TotalResults int32                        `json:"total_results"`
}

// MultiListPage_Results_Item defines model for MultiListPage.results.Item.
type MultiListPage_Results_Item struct {
	union json.RawMessage
}

// Object defines model for Object.
type Object struct {
	Id   int32  `json:"id"`
	Name string `json:"name"`
}

// ObjectListPage defines model for ObjectListPage.
type ObjectListPage struct {
	Page         int32    `json:"page"`
	Results      []Object `json:"results"`
	TotalPages   int32    `json:"total_pages"`
	TotalResults int32    `json:"total_results"`
}

// Page defines model for Page.
type Page struct {
	Page         int32 `json:"page"`
	TotalPages   int32 `json:"total_pages"`
	TotalResults int32 `json:"total_results"`
}

// PersonListItem defines model for PersonListItem.
type PersonListItem struct {
	Adult              *bool                           `json:"adult,omitempty"`
	Gender             *int32                          `json:"gender,omitempty"`
	Id                 int                             `json:"id"`
	KnownFor           *[]PersonListItem_KnownFor_Item `json:"known_for,omitempty"`
	KnownForDepartment *string                         `json:"known_for_department,omitempty"`
	Name               string                          `json:"name"`
	OriginalName       string                          `json:"original_name"`
	Popularity         *float32                        `json:"popularity,omitempty"`
	ProfilePath        *string                         `json:"profile_path,omitempty"`
}

// PersonListItem_KnownFor_Item defines model for PersonListItem.known_for.Item.
type PersonListItem_KnownFor_Item struct {
	union json.RawMessage
}

// PersonListItemWithMediaType defines model for PersonListItemWithMediaType.
type PersonListItemWithMediaType struct {
	Adult              *bool                                        `json:"adult,omitempty"`
	Gender             *int32                                       `json:"gender,omitempty"`
	Id                 int                                          `json:"id"`
	KnownFor           *[]PersonListItemWithMediaType_KnownFor_Item `json:"known_for,omitempty"`
	KnownForDepartment *string                                      `json:"known_for_department,omitempty"`
	MediaType          MediaType                                    `json:"media_type"`
	Name               string                                       `json:"name"`
	OriginalName       string                                       `json:"original_name"`
	Popularity         *float32                                     `json:"popularity,omitempty"`
	ProfilePath        *string                                      `json:"profile_path,omitempty"`
}

// PersonListItemWithMediaType_KnownFor_Item defines model for PersonListItemWithMediaType.known_for.Item.
type PersonListItemWithMediaType_KnownFor_Item struct {
	union json.RawMessage
}

// PersonListPage defines model for PersonListPage.
type PersonListPage struct {
	Page         int32            `json:"page"`
	Results      []PersonListItem `json:"results"`
	TotalPages   int32            `json:"total_pages"`
	TotalResults int32            `json:"total_results"`
}

// TvListItem defines model for TvListItem.
type TvListItem struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	FirstAirDate     *string   `json:"first_air_date,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	Name             string    `json:"name"`
	OriginCountry    *[]string `json:"origin_country,omitempty"`
	OriginalLanguage string    `json:"original_language"`
	OriginalName     string    `json:"original_name"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// TvListItemWithMediaType defines model for TvListItemWithMediaType.
type TvListItemWithMediaType struct {
	Adult            *bool     `json:"adult,omitempty"`
	BackdropPath     *string   `json:"backdrop_path,omitempty"`
	FirstAirDate     *string   `json:"first_air_date,omitempty"`
	GenreIds         *[]int32  `json:"genre_ids,omitempty"`
	Id               int       `json:"id"`
	MediaType        MediaType `json:"media_type"`
	Name             string    `json:"name"`
	OriginCountry    *[]string `json:"origin_country,omitempty"`
	OriginalLanguage string    `json:"original_language"`
	OriginalName     string    `json:"original_name"`
	Overview         *string   `json:"overview,omitempty"`
	Popularity       *float32  `json:"popularity,omitempty"`
	PosterPath       *string   `json:"poster_path,omitempty"`
	VoteAverage      *float32  `json:"vote_average,omitempty"`
	VoteCount        *int      `json:"vote_count,omitempty"`
}

// TvListPage defines model for TvListPage.
type TvListPage struct {
	Page         int32        `json:"page"`
	Results      []TvListItem `json:"results"`
	TotalPages   int32        `json:"total_pages"`
	TotalResults int32        `json:"total_results"`
}

// CompanyID defines model for CompanyID.
type CompanyID = int32

// IncludeAdult defines model for IncludeAdult.
type IncludeAdult = bool

// KeywordID defines model for KeywordID.
type KeywordID = int32

// LanguageParam defines model for LanguageParam.
type LanguageParam = string

// MovieID defines model for MovieID.
type MovieID = int32

// PageParam defines model for PageParam.
type PageParam = int32

// PrimaryReleaseYear defines model for PrimaryReleaseYear.
type PrimaryReleaseYear = int32

// Query defines model for Query.
type Query = string

// Region defines model for Region.
type Region = string

// Year defines model for Year.
type Year = string

// InvalidPage defines model for InvalidPage.
type InvalidPage = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ConfigurationCountriesParams defines parameters for ConfigurationCountries.
type ConfigurationCountriesParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreMovieListParams defines parameters for GenreMovieList.
type GenreMovieListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreTvListParams defines parameters for GenreTvList.
type GenreTvListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// KeywordMoviesParams defines parameters for KeywordMovies.
type KeywordMoviesParams struct {
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// MovieNowPlayingListParams defines parameters for MovieNowPlayingList.
type MovieNowPlayingListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MoviePopularListParams defines parameters for MoviePopularList.
type MoviePopularListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieTopRatedListParams defines parameters for MovieTopRatedList.
type MovieTopRatedListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieUpcomingListParams defines parameters for MovieUpcomingList.
type MovieUpcomingListParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
}

// MovieSimilarParams defines parameters for MovieSimilar.
type MovieSimilarParams struct {
	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchKeywordParams defines parameters for SearchKeyword.
type SearchKeywordParams struct {
	Query Query      `form:"query" json:"query"`
	Page  *PageParam `form:"page,omitempty" json:"page,omitempty"`
}

// SearchMovieParams defines parameters for SearchMovie.
type SearchMovieParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language           *LanguageParam      `form:"language,omitempty" json:"language,omitempty"`
	PrimaryReleaseYear *PrimaryReleaseYear `form:"primary_release_year,omitempty" json:"primary_release_year,omitempty"`
	Page               *PageParam          `form:"page,omitempty" json:"page,omitempty"`

	// Region `ISO-3166-1` code
	Region *Region `form:"region,omitempty" json:"region,omitempty"`
	Year   *Year   `form:"year,omitempty" json:"year,omitempty"`
}

// SearchMultiParams defines parameters for SearchMulti.
type SearchMultiParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchPersonParams defines parameters for SearchPerson.
type SearchPersonParams struct {
	Query        Query         `form:"query" json:"query"`
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
}

// SearchTVParams defines parameters for SearchTV.
type SearchTVParams struct {
	Query            Query         `form:"query" json:"query"`
	FirstAirDateYear *string       `form:"first_air_date_year,omitempty" json:"first_air_date_year,omitempty"`
	IncludeAdult     *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language `ISO-639-1`-`ISO-3166-1` code
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *PageParam     `form:"page,omitempty" json:"page,omitempty"`
	Year     *Year          `form:"year,omitempty" json:"year,omitempty"`
}

// AsMovieListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a MovieListItemWithMediaType
func (t MultiListPage_Results_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided MovieListItemWithMediaType
func (t *MultiListPage_Results_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided MovieListItemWithMediaType
func (t *MultiListPage_Results_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPersonListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a PersonListItemWithMediaType
func (t MultiListPage_Results_Item) AsPersonListItemWithMediaType() (PersonListItemWithMediaType, error) {
	var body PersonListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPersonListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided PersonListItemWithMediaType
func (t *MultiListPage_Results_Item) FromPersonListItemWithMediaType(v PersonListItemWithMediaType) error {
	v.MediaType = "person"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePersonListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided PersonListItemWithMediaType
func (t *MultiListPage_Results_Item) MergePersonListItemWithMediaType(v PersonListItemWithMediaType) error {
	v.MediaType = "person"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the MultiListPage_Results_Item as a TvListItemWithMediaType
func (t MultiListPage_Results_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the MultiListPage_Results_Item as the provided TvListItemWithMediaType
func (t *MultiListPage_Results_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the MultiListPage_Results_Item, using the provided TvListItemWithMediaType
func (t *MultiListPage_Results_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MultiListPage_Results_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t MultiListPage_Results_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "person":
		return t.AsPersonListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t MultiListPage_Results_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MultiListPage_Results_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMovieListItemWithMediaType returns the union data inside the PersonListItem_KnownFor_Item as a MovieListItemWithMediaType
func (t PersonListItem_KnownFor_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the PersonListItem_KnownFor_Item as the provided MovieListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the PersonListItem_KnownFor_Item, using the provided MovieListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the PersonListItem_KnownFor_Item as a TvListItemWithMediaType
func (t PersonListItem_KnownFor_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the PersonListItem_KnownFor_Item as the provided TvListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the PersonListItem_KnownFor_Item, using the provided TvListItemWithMediaType
func (t *PersonListItem_KnownFor_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonListItem_KnownFor_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PersonListItem_KnownFor_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PersonListItem_KnownFor_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonListItem_KnownFor_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMovieListItemWithMediaType returns the union data inside the PersonListItemWithMediaType_KnownFor_Item as a MovieListItemWithMediaType
func (t PersonListItemWithMediaType_KnownFor_Item) AsMovieListItemWithMediaType() (MovieListItemWithMediaType, error) {
	var body MovieListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMovieListItemWithMediaType overwrites any union data inside the PersonListItemWithMediaType_KnownFor_Item as the provided MovieListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) FromMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMovieListItemWithMediaType performs a merge with any union data inside the PersonListItemWithMediaType_KnownFor_Item, using the provided MovieListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) MergeMovieListItemWithMediaType(v MovieListItemWithMediaType) error {
	v.MediaType = "movie"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTvListItemWithMediaType returns the union data inside the PersonListItemWithMediaType_KnownFor_Item as a TvListItemWithMediaType
func (t PersonListItemWithMediaType_KnownFor_Item) AsTvListItemWithMediaType() (TvListItemWithMediaType, error) {
	var body TvListItemWithMediaType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTvListItemWithMediaType overwrites any union data inside the PersonListItemWithMediaType_KnownFor_Item as the provided TvListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) FromTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTvListItemWithMediaType performs a merge with any union data inside the PersonListItemWithMediaType_KnownFor_Item, using the provided TvListItemWithMediaType
func (t *PersonListItemWithMediaType_KnownFor_Item) MergeTvListItemWithMediaType(v TvListItemWithMediaType) error {
	v.MediaType = "tv"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PersonListItemWithMediaType_KnownFor_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"media_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PersonListItemWithMediaType_KnownFor_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "movie":
		return t.AsMovieListItemWithMediaType()
	case "tv":
		return t.AsTvListItemWithMediaType()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PersonListItemWithMediaType_KnownFor_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PersonListItemWithMediaType_KnownFor_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CompanyDetails request
	CompanyDetails(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompanyImages request
	CompanyImages(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationDetails request
	ConfigurationDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationCountries request
	ConfigurationCountries(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationJobs request
	ConfigurationJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationLanguages request
	ConfigurationLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationPrimaryTranslations request
	ConfigurationPrimaryTranslations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationTimezones request
	ConfigurationTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenreMovieList request
	GenreMovieList(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenreTvList request
	GenreTvList(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeywordDetails request
	KeywordDetails(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeywordMovies request
	KeywordMovies(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovieNowPlayingList request
	MovieNowPlayingList(ctx context.Context, params *MovieNowPlayingListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoviePopularList request
	MoviePopularList(ctx context.Context, params *MoviePopularListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovieTopRatedList request
	MovieTopRatedList(ctx context.Context, params *MovieTopRatedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovieUpcomingList request
	MovieUpcomingList(ctx context.Context, params *MovieUpcomingListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovieKeywords request
	MovieKeywords(ctx context.Context, movieId MovieID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovieSimilar request
	MovieSimilar(ctx context.Context, movieId MovieID, params *MovieSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchKeyword request
	SearchKeyword(ctx context.Context, params *SearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMovie request
	SearchMovie(ctx context.Context, params *SearchMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMulti request
	SearchMulti(ctx context.Context, params *SearchMultiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchPerson request
	SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchTV request
	SearchTV(ctx context.Context, params *SearchTVParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CompanyDetails(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompanyDetailsRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompanyImages(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompanyImagesRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationCountries(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationCountriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationJobsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationLanguagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationPrimaryTranslations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationPrimaryTranslationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationTimezonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenreMovieList(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenreMovieListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenreTvList(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenreTvListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeywordDetails(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeywordDetailsRequest(c.Server, keywordId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeywordMovies(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeywordMoviesRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovieNowPlayingList(ctx context.Context, params *MovieNowPlayingListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovieNowPlayingListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoviePopularList(ctx context.Context, params *MoviePopularListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoviePopularListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovieTopRatedList(ctx context.Context, params *MovieTopRatedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovieTopRatedListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovieUpcomingList(ctx context.Context, params *MovieUpcomingListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovieUpcomingListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovieKeywords(ctx context.Context, movieId MovieID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovieKeywordsRequest(c.Server, movieId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovieSimilar(ctx context.Context, movieId MovieID, params *MovieSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovieSimilarRequest(c.Server, movieId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchKeyword(ctx context.Context, params *SearchKeywordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchKeywordRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMovie(ctx context.Context, params *SearchMovieParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMovieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMulti(ctx context.Context, params *SearchMultiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMultiRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchPerson(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchPersonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchTV(ctx context.Context, params *SearchTVParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchTVRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCompanyDetailsRequest generates requests for CompanyDetails
func NewCompanyDetailsRequest(server string, companyId CompanyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "company_id", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompanyImagesRequest generates requests for CompanyImages
func NewCompanyImagesRequest(server string, companyId CompanyID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "company_id", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationDetailsRequest generates requests for ConfigurationDetails
func NewConfigurationDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationCountriesRequest generates requests for ConfigurationCountries
func NewConfigurationCountriesRequest(server string, params *ConfigurationCountriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationJobsRequest generates requests for ConfigurationJobs
func NewConfigurationJobsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationLanguagesRequest generates requests for ConfigurationLanguages
func NewConfigurationLanguagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationPrimaryTranslationsRequest generates requests for ConfigurationPrimaryTranslations
func NewConfigurationPrimaryTranslationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/primary_translations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationTimezonesRequest generates requests for ConfigurationTimezones
func NewConfigurationTimezonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/timezones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenreMovieListRequest generates requests for GenreMovieList
func NewGenreMovieListRequest(server string, params *GenreMovieListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genre/movie/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenreTvListRequest generates requests for GenreTvList
func NewGenreTvListRequest(server string, params *GenreTvListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genre/tv/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeywordDetailsRequest generates requests for KeywordDetails
func NewKeywordDetailsRequest(server string, keywordId KeywordID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyword/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeywordMoviesRequest generates requests for KeywordMovies
func NewKeywordMoviesRequest(server string, keywordId KeywordID, params *KeywordMoviesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyword/%s/movies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovieNowPlayingListRequest generates requests for MovieNowPlayingList
func NewMovieNowPlayingListRequest(server string, params *MovieNowPlayingListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/now_playing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoviePopularListRequest generates requests for MoviePopularList
func NewMoviePopularListRequest(server string, params *MoviePopularListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/popular")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovieTopRatedListRequest generates requests for MovieTopRatedList
func NewMovieTopRatedListRequest(server string, params *MovieTopRatedListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/top_rated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovieUpcomingListRequest generates requests for MovieUpcomingList
func NewMovieUpcomingListRequest(server string, params *MovieUpcomingListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/upcoming")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovieKeywordsRequest generates requests for MovieKeywords
func NewMovieKeywordsRequest(server string, movieId MovieID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, movieId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/%s/keywords", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovieSimilarRequest generates requests for MovieSimilar
func NewMovieSimilarRequest(server string, movieId MovieID, params *MovieSimilarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, movieId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movie/%s/similar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchKeywordRequest generates requests for SearchKeyword
func NewSearchKeywordRequest(server string, params *SearchKeywordParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/keyword")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchMovieRequest generates requests for SearchMovie
func NewSearchMovieRequest(server string, params *SearchMovieParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/movie")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrimaryReleaseYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primary_release_year", runtime.ParamLocationQuery, *params.PrimaryReleaseYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchMultiRequest generates requests for SearchMulti
func NewSearchMultiRequest(server string, params *SearchMultiParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/multi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchPersonRequest generates requests for SearchPerson
func NewSearchPersonRequest(server string, params *SearchPersonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchTVRequest generates requests for SearchTV
func NewSearchTVRequest(server string, params *SearchTVParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/tv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FirstAirDateYear != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_air_date_year", runtime.ParamLocationQuery, *params.FirstAirDateYear); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Year != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CompanyDetailsWithResponse request
	CompanyDetailsWithResponse(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*CompanyDetailsResponse, error)

	// CompanyImagesWithResponse request
	CompanyImagesWithResponse(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*CompanyImagesResponse, error)

	// ConfigurationDetailsWithResponse request
	ConfigurationDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationDetailsResponse, error)

	// ConfigurationCountriesWithResponse request
	ConfigurationCountriesWithResponse(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*ConfigurationCountriesResponse, error)

	// ConfigurationJobsWithResponse request
	ConfigurationJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationJobsResponse, error)

	// ConfigurationLanguagesWithResponse request
	ConfigurationLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationLanguagesResponse, error)

	// ConfigurationPrimaryTranslationsWithResponse request
	ConfigurationPrimaryTranslationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationPrimaryTranslationsResponse, error)

	// ConfigurationTimezonesWithResponse request
	ConfigurationTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationTimezonesResponse, error)

	// GenreMovieListWithResponse request
	GenreMovieListWithResponse(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*GenreMovieListResponse, error)

	// GenreTvListWithResponse request
	GenreTvListWithResponse(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*GenreTvListResponse, error)

	// KeywordDetailsWithResponse request
	KeywordDetailsWithResponse(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*KeywordDetailsResponse, error)

	// KeywordMoviesWithResponse request
	KeywordMoviesWithResponse(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*KeywordMoviesResponse, error)

	// MovieNowPlayingListWithResponse request
	MovieNowPlayingListWithResponse(ctx context.Context, params *MovieNowPlayingListParams, reqEditors ...RequestEditorFn) (*MovieNowPlayingListResponse, error)

	// MoviePopularListWithResponse request
	MoviePopularListWithResponse(ctx context.Context, params *MoviePopularListParams, reqEditors ...RequestEditorFn) (*MoviePopularListResponse, error)

	// MovieTopRatedListWithResponse request
	MovieTopRatedListWithResponse(ctx context.Context, params *MovieTopRatedListParams, reqEditors ...RequestEditorFn) (*MovieTopRatedListResponse, error)

	// MovieUpcomingListWithResponse request
	MovieUpcomingListWithResponse(ctx context.Context, params *MovieUpcomingListParams, reqEditors ...RequestEditorFn) (*MovieUpcomingListResponse, error)

	// MovieKeywordsWithResponse request
	MovieKeywordsWithResponse(ctx context.Context, movieId MovieID, reqEditors ...RequestEditorFn) (*MovieKeywordsResponse, error)

	// MovieSimilarWithResponse request
	MovieSimilarWithResponse(ctx context.Context, movieId MovieID, params *MovieSimilarParams, reqEditors ...RequestEditorFn) (*MovieSimilarResponse, error)

	// SearchKeywordWithResponse request
	SearchKeywordWithResponse(ctx context.Context, params *SearchKeywordParams, reqEditors ...RequestEditorFn) (*SearchKeywordResponse, error)

	// SearchMovieWithResponse request
	SearchMovieWithResponse(ctx context.Context, params *SearchMovieParams, reqEditors ...RequestEditorFn) (*SearchMovieResponse, error)

	// SearchMultiWithResponse request
	SearchMultiWithResponse(ctx context.Context, params *SearchMultiParams, reqEditors ...RequestEditorFn) (*SearchMultiResponse, error)

	// SearchPersonWithResponse request
	SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error)

	// SearchTVWithResponse request
	SearchTVWithResponse(ctx context.Context, params *SearchTVParams, reqEditors ...RequestEditorFn) (*SearchTVResponse, error)
}

type CompanyDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Company
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r CompanyDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompanyDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompanyImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    *int32         `json:"id,omitempty"`
		Logos *[]CompanyLogo `json:"logos,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r CompanyImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompanyImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ChangeKeys []string `json:"change_keys"`
		Images     struct {
			BackdropSizes []string `json:"backdrop_sizes"`
			BaseUrl       string   `json:"base_url"`
			LogoSizes     []string `json:"logo_sizes"`
			PosterSizes   []string `json:"poster_sizes"`
			ProfileSizes  []string `json:"profile_sizes"`
			SecureBaseUrl string   `json:"secure_base_url"`
			StillSizes    []string `json:"still_sizes"`
		} `json:"images"`
	}
	JSON401 *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Country
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Department
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Language
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationPrimaryTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationPrimaryTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationPrimaryTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationTimezonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CountryWithTimezones
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r ConfigurationTimezonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationTimezonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenreMovieListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Object
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GenreMovieListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenreMovieListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenreTvListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Object
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GenreTvListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenreTvListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeywordDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r KeywordDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeywordDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeywordMoviesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r KeywordMoviesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeywordMoviesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovieNowPlayingListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPageWithDates
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r MovieNowPlayingListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovieNowPlayingListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoviePopularListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r MoviePopularListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoviePopularListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovieTopRatedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r MovieTopRatedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovieTopRatedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovieUpcomingListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPageWithDates
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r MovieUpcomingListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovieUpcomingListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovieKeywordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id       int32    `json:"id"`
		Keywords []Object `json:"keywords"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
}

// Status returns HTTPResponse.Status
func (r MovieKeywordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovieKeywordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovieSimilarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r MovieSimilarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovieSimilarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchKeywordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r SearchKeywordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchKeywordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMovieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovieListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r SearchMovieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMovieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMultiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MultiListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r SearchMultiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMultiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchPersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r SearchPersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchPersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchTVResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TvListPage
	JSON400      *InvalidPage
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r SearchTVResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchTVResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CompanyDetailsWithResponse request returning *CompanyDetailsResponse
func (c *ClientWithResponses) CompanyDetailsWithResponse(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*CompanyDetailsResponse, error) {
	rsp, err := c.CompanyDetails(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompanyDetailsResponse(rsp)
}

// CompanyImagesWithResponse request returning *CompanyImagesResponse
func (c *ClientWithResponses) CompanyImagesWithResponse(ctx context.Context, companyId CompanyID, reqEditors ...RequestEditorFn) (*CompanyImagesResponse, error) {
	rsp, err := c.CompanyImages(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompanyImagesResponse(rsp)
}

// ConfigurationDetailsWithResponse request returning *ConfigurationDetailsResponse
func (c *ClientWithResponses) ConfigurationDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationDetailsResponse, error) {
	rsp, err := c.ConfigurationDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationDetailsResponse(rsp)
}

// ConfigurationCountriesWithResponse request returning *ConfigurationCountriesResponse
func (c *ClientWithResponses) ConfigurationCountriesWithResponse(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*ConfigurationCountriesResponse, error) {
	rsp, err := c.ConfigurationCountries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationCountriesResponse(rsp)
}

// ConfigurationJobsWithResponse request returning *ConfigurationJobsResponse
func (c *ClientWithResponses) ConfigurationJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationJobsResponse, error) {
	rsp, err := c.ConfigurationJobs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationJobsResponse(rsp)
}

// ConfigurationLanguagesWithResponse request returning *ConfigurationLanguagesResponse
func (c *ClientWithResponses) ConfigurationLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationLanguagesResponse, error) {
	rsp, err := c.ConfigurationLanguages(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationLanguagesResponse(rsp)
}

// ConfigurationPrimaryTranslationsWithResponse request returning *ConfigurationPrimaryTranslationsResponse
func (c *ClientWithResponses) ConfigurationPrimaryTranslationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationPrimaryTranslationsResponse, error) {
	rsp, err := c.ConfigurationPrimaryTranslations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationPrimaryTranslationsResponse(rsp)
}

// ConfigurationTimezonesWithResponse request returning *ConfigurationTimezonesResponse
func (c *ClientWithResponses) ConfigurationTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationTimezonesResponse, error) {
	rsp, err := c.ConfigurationTimezones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationTimezonesResponse(rsp)
}

// GenreMovieListWithResponse request returning *GenreMovieListResponse
func (c *ClientWithResponses) GenreMovieListWithResponse(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*GenreMovieListResponse, error) {
	rsp, err := c.GenreMovieList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenreMovieListResponse(rsp)
}

// GenreTvListWithResponse request returning *GenreTvListResponse
func (c *ClientWithResponses) GenreTvListWithResponse(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*GenreTvListResponse, error) {
	rsp, err := c.GenreTvList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenreTvListResponse(rsp)
}

// KeywordDetailsWithResponse request returning *KeywordDetailsResponse
func (c *ClientWithResponses) KeywordDetailsWithResponse(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*KeywordDetailsResponse, error) {
	rsp, err := c.KeywordDetails(ctx, keywordId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeywordDetailsResponse(rsp)
}

// KeywordMoviesWithResponse request returning *KeywordMoviesResponse
func (c *ClientWithResponses) KeywordMoviesWithResponse(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*KeywordMoviesResponse, error) {
	rsp, err := c.KeywordMovies(ctx, keywordId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeywordMoviesResponse(rsp)
}

// MovieNowPlayingListWithResponse request returning *MovieNowPlayingListResponse
func (c *ClientWithResponses) MovieNowPlayingListWithResponse(ctx context.Context, params *MovieNowPlayingListParams, reqEditors ...RequestEditorFn) (*MovieNowPlayingListResponse, error) {
	rsp, err := c.MovieNowPlayingList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovieNowPlayingListResponse(rsp)
}

// MoviePopularListWithResponse request returning *MoviePopularListResponse
func (c *ClientWithResponses) MoviePopularListWithResponse(ctx context.Context, params *MoviePopularListParams, reqEditors ...RequestEditorFn) (*MoviePopularListResponse, error) {
	rsp, err := c.MoviePopularList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoviePopularListResponse(rsp)
}

// MovieTopRatedListWithResponse request returning *MovieTopRatedListResponse
func (c *ClientWithResponses) MovieTopRatedListWithResponse(ctx context.Context, params *MovieTopRatedListParams, reqEditors ...RequestEditorFn) (*MovieTopRatedListResponse, error) {
	rsp, err := c.MovieTopRatedList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovieTopRatedListResponse(rsp)
}

// MovieUpcomingListWithResponse request returning *MovieUpcomingListResponse
func (c *ClientWithResponses) MovieUpcomingListWithResponse(ctx context.Context, params *MovieUpcomingListParams, reqEditors ...RequestEditorFn) (*MovieUpcomingListResponse, error) {
	rsp, err := c.MovieUpcomingList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovieUpcomingListResponse(rsp)
}

// MovieKeywordsWithResponse request returning *MovieKeywordsResponse
func (c *ClientWithResponses) MovieKeywordsWithResponse(ctx context.Context, movieId MovieID, reqEditors ...RequestEditorFn) (*MovieKeywordsResponse, error) {
	rsp, err := c.MovieKeywords(ctx, movieId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovieKeywordsResponse(rsp)
}

// MovieSimilarWithResponse request returning *MovieSimilarResponse
func (c *ClientWithResponses) MovieSimilarWithResponse(ctx context.Context, movieId MovieID, params *MovieSimilarParams, reqEditors ...RequestEditorFn) (*MovieSimilarResponse, error) {
	rsp, err := c.MovieSimilar(ctx, movieId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovieSimilarResponse(rsp)
}

// SearchKeywordWithResponse request returning *SearchKeywordResponse
func (c *ClientWithResponses) SearchKeywordWithResponse(ctx context.Context, params *SearchKeywordParams, reqEditors ...RequestEditorFn) (*SearchKeywordResponse, error) {
	rsp, err := c.SearchKeyword(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchKeywordResponse(rsp)
}

// SearchMovieWithResponse request returning *SearchMovieResponse
func (c *ClientWithResponses) SearchMovieWithResponse(ctx context.Context, params *SearchMovieParams, reqEditors ...RequestEditorFn) (*SearchMovieResponse, error) {
	rsp, err := c.SearchMovie(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMovieResponse(rsp)
}

// SearchMultiWithResponse request returning *SearchMultiResponse
func (c *ClientWithResponses) SearchMultiWithResponse(ctx context.Context, params *SearchMultiParams, reqEditors ...RequestEditorFn) (*SearchMultiResponse, error) {
	rsp, err := c.SearchMulti(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMultiResponse(rsp)
}

// SearchPersonWithResponse request returning *SearchPersonResponse
func (c *ClientWithResponses) SearchPersonWithResponse(ctx context.Context, params *SearchPersonParams, reqEditors ...RequestEditorFn) (*SearchPersonResponse, error) {
	rsp, err := c.SearchPerson(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchPersonResponse(rsp)
}

// SearchTVWithResponse request returning *SearchTVResponse
func (c *ClientWithResponses) SearchTVWithResponse(ctx context.Context, params *SearchTVParams, reqEditors ...RequestEditorFn) (*SearchTVResponse, error) {
	rsp, err := c.SearchTV(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchTVResponse(rsp)
}

// ParseCompanyDetailsResponse parses an HTTP response from a CompanyDetailsWithResponse call
func ParseCompanyDetailsResponse(rsp *http.Response) (*CompanyDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompanyDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Company
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCompanyImagesResponse parses an HTTP response from a CompanyImagesWithResponse call
func ParseCompanyImagesResponse(rsp *http.Response) (*CompanyImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompanyImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    *int32         `json:"id,omitempty"`
			Logos *[]CompanyLogo `json:"logos,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseConfigurationDetailsResponse parses an HTTP response from a ConfigurationDetailsWithResponse call
func ParseConfigurationDetailsResponse(rsp *http.Response) (*ConfigurationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ChangeKeys []string `json:"change_keys"`
			Images     struct {
				BackdropSizes []string `json:"backdrop_sizes"`
				BaseUrl       string   `json:"base_url"`
				LogoSizes     []string `json:"logo_sizes"`
				PosterSizes   []string `json:"poster_sizes"`
				ProfileSizes  []string `json:"profile_sizes"`
				SecureBaseUrl string   `json:"secure_base_url"`
				StillSizes    []string `json:"still_sizes"`
			} `json:"images"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationCountriesResponse parses an HTTP response from a ConfigurationCountriesWithResponse call
func ParseConfigurationCountriesResponse(rsp *http.Response) (*ConfigurationCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Country
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationJobsResponse parses an HTTP response from a ConfigurationJobsWithResponse call
func ParseConfigurationJobsResponse(rsp *http.Response) (*ConfigurationJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationLanguagesResponse parses an HTTP response from a ConfigurationLanguagesWithResponse call
func ParseConfigurationLanguagesResponse(rsp *http.Response) (*ConfigurationLanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationPrimaryTranslationsResponse parses an HTTP response from a ConfigurationPrimaryTranslationsWithResponse call
func ParseConfigurationPrimaryTranslationsResponse(rsp *http.Response) (*ConfigurationPrimaryTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationPrimaryTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationTimezonesResponse parses an HTTP response from a ConfigurationTimezonesWithResponse call
func ParseConfigurationTimezonesResponse(rsp *http.Response) (*ConfigurationTimezonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationTimezonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CountryWithTimezones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGenreMovieListResponse parses an HTTP response from a GenreMovieListWithResponse call
func ParseGenreMovieListResponse(rsp *http.Response) (*GenreMovieListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenreMovieListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGenreTvListResponse parses an HTTP response from a GenreTvListWithResponse call
func ParseGenreTvListResponse(rsp *http.Response) (*GenreTvListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenreTvListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKeywordDetailsResponse parses an HTTP response from a KeywordDetailsWithResponse call
func ParseKeywordDetailsResponse(rsp *http.Response) (*KeywordDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeywordDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseKeywordMoviesResponse parses an HTTP response from a KeywordMoviesWithResponse call
func ParseKeywordMoviesResponse(rsp *http.Response) (*KeywordMoviesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeywordMoviesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMovieNowPlayingListResponse parses an HTTP response from a MovieNowPlayingListWithResponse call
func ParseMovieNowPlayingListResponse(rsp *http.Response) (*MovieNowPlayingListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovieNowPlayingListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPageWithDates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseMoviePopularListResponse parses an HTTP response from a MoviePopularListWithResponse call
func ParseMoviePopularListResponse(rsp *http.Response) (*MoviePopularListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoviePopularListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseMovieTopRatedListResponse parses an HTTP response from a MovieTopRatedListWithResponse call
func ParseMovieTopRatedListResponse(rsp *http.Response) (*MovieTopRatedListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovieTopRatedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseMovieUpcomingListResponse parses an HTTP response from a MovieUpcomingListWithResponse call
func ParseMovieUpcomingListResponse(rsp *http.Response) (*MovieUpcomingListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovieUpcomingListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPageWithDates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseMovieKeywordsResponse parses an HTTP response from a MovieKeywordsWithResponse call
func ParseMovieKeywordsResponse(rsp *http.Response) (*MovieKeywordsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovieKeywordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id       int32    `json:"id"`
			Keywords []Object `json:"keywords"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseMovieSimilarResponse parses an HTTP response from a MovieSimilarWithResponse call
func ParseMovieSimilarResponse(rsp *http.Response) (*MovieSimilarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovieSimilarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchKeywordResponse parses an HTTP response from a SearchKeywordWithResponse call
func ParseSearchKeywordResponse(rsp *http.Response) (*SearchKeywordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchKeywordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchMovieResponse parses an HTTP response from a SearchMovieWithResponse call
func ParseSearchMovieResponse(rsp *http.Response) (*SearchMovieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMovieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovieListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchMultiResponse parses an HTTP response from a SearchMultiWithResponse call
func ParseSearchMultiResponse(rsp *http.Response) (*SearchMultiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMultiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MultiListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchPersonResponse parses an HTTP response from a SearchPersonWithResponse call
func ParseSearchPersonResponse(rsp *http.Response) (*SearchPersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchPersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchTVResponse parses an HTTP response from a SearchTVWithResponse call
func ParseSearchTVResponse(rsp *http.Response) (*SearchTVResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchTVResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TvListPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Details
	// (GET /company/{company_id})
	CompanyDetails(ctx echo.Context, companyId CompanyID) error
	// Images
	// (GET /company/{company_id}/images)
	CompanyImages(ctx echo.Context, companyId CompanyID) error
	// Details
	// (GET /configuration)
	ConfigurationDetails(ctx echo.Context) error
	// Countries
	// (GET /configuration/countries)
	ConfigurationCountries(ctx echo.Context, params ConfigurationCountriesParams) error
	// Jobs
	// (GET /configuration/jobs)
	ConfigurationJobs(ctx echo.Context) error
	// Languages
	// (GET /configuration/languages)
	ConfigurationLanguages(ctx echo.Context) error
	// Primary Translations
	// (GET /configuration/primary_translations)
	ConfigurationPrimaryTranslations(ctx echo.Context) error
	// Timezones
	// (GET /configuration/timezones)
	ConfigurationTimezones(ctx echo.Context) error
	// Movie List
	// (GET /genre/movie/list)
	GenreMovieList(ctx echo.Context, params GenreMovieListParams) error
	// TV List
	// (GET /genre/tv/list)
	GenreTvList(ctx echo.Context, params GenreTvListParams) error
	// Details
	// (GET /keyword/{keyword_id})
	KeywordDetails(ctx echo.Context, keywordId KeywordID) error
	// Movies
	// (GET /keyword/{keyword_id}/movies)
	KeywordMovies(ctx echo.Context, keywordId KeywordID, params KeywordMoviesParams) error
	// Now Playing
	// (GET /movie/now_playing)
	MovieNowPlayingList(ctx echo.Context, params MovieNowPlayingListParams) error
	// Popular
	// (GET /movie/popular)
	MoviePopularList(ctx echo.Context, params MoviePopularListParams) error
	// Top Rated
	// (GET /movie/top_rated)
	MovieTopRatedList(ctx echo.Context, params MovieTopRatedListParams) error
	// Upcoming
	// (GET /movie/upcoming)
	MovieUpcomingList(ctx echo.Context, params MovieUpcomingListParams) error
	// Keywords
	// (GET /movie/{movie_id}/keywords)
	MovieKeywords(ctx echo.Context, movieId MovieID) error
	// Similar
	// (GET /movie/{movie_id}/similar)
	MovieSimilar(ctx echo.Context, movieId MovieID, params MovieSimilarParams) error
	// Keyword
	// (GET /search/keyword)
	SearchKeyword(ctx echo.Context, params SearchKeywordParams) error
	// Movie
	// (GET /search/movie)
	SearchMovie(ctx echo.Context, params SearchMovieParams) error
	// Multi
	// (GET /search/multi)
	SearchMulti(ctx echo.Context, params SearchMultiParams) error
	// Person
	// (GET /search/person)
	SearchPerson(ctx echo.Context, params SearchPersonParams) error
	// TV
	// (GET /search/tv)
	SearchTV(ctx echo.Context, params SearchTVParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CompanyDetails converts echo context to params.
func (w *ServerInterfaceWrapper) CompanyDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_id" -------------
	var companyId CompanyID

	err = runtime.BindStyledParameterWithLocation("simple", false, "company_id", runtime.ParamLocationPath, ctx.Param("company_id"), &companyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CompanyDetails(ctx, companyId)
	return err
}

// CompanyImages converts echo context to params.
func (w *ServerInterfaceWrapper) CompanyImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_id" -------------
	var companyId CompanyID

	err = runtime.BindStyledParameterWithLocation("simple", false, "company_id", runtime.ParamLocationPath, ctx.Param("company_id"), &companyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CompanyImages(ctx, companyId)
	return err
}

// ConfigurationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationDetails(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationDetails(ctx)
	return err
}

// ConfigurationCountries converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationCountries(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfigurationCountriesParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationCountries(ctx, params)
	return err
}

// ConfigurationJobs converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationJobs(ctx)
	return err
}

// ConfigurationLanguages converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationLanguages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationLanguages(ctx)
	return err
}

// ConfigurationPrimaryTranslations converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationPrimaryTranslations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationPrimaryTranslations(ctx)
	return err
}

// ConfigurationTimezones converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationTimezones(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfigurationTimezones(ctx)
	return err
}

// GenreMovieList converts echo context to params.
func (w *ServerInterfaceWrapper) GenreMovieList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenreMovieListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenreMovieList(ctx, params)
	return err
}

// GenreTvList converts echo context to params.
func (w *ServerInterfaceWrapper) GenreTvList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenreTvListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenreTvList(ctx, params)
	return err
}

// KeywordDetails converts echo context to params.
func (w *ServerInterfaceWrapper) KeywordDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyword_id" -------------
	var keywordId KeywordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, ctx.Param("keyword_id"), &keywordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.KeywordDetails(ctx, keywordId)
	return err
}

// KeywordMovies converts echo context to params.
func (w *ServerInterfaceWrapper) KeywordMovies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyword_id" -------------
	var keywordId KeywordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, ctx.Param("keyword_id"), &keywordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params KeywordMoviesParams
	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.KeywordMovies(ctx, keywordId, params)
	return err
}

// MovieNowPlayingList converts echo context to params.
func (w *ServerInterfaceWrapper) MovieNowPlayingList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MovieNowPlayingListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MovieNowPlayingList(ctx, params)
	return err
}

// MoviePopularList converts echo context to params.
func (w *ServerInterfaceWrapper) MoviePopularList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MoviePopularListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MoviePopularList(ctx, params)
	return err
}

// MovieTopRatedList converts echo context to params.
func (w *ServerInterfaceWrapper) MovieTopRatedList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MovieTopRatedListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MovieTopRatedList(ctx, params)
	return err
}

// MovieUpcomingList converts echo context to params.
func (w *ServerInterfaceWrapper) MovieUpcomingList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MovieUpcomingListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MovieUpcomingList(ctx, params)
	return err
}

// MovieKeywords converts echo context to params.
func (w *ServerInterfaceWrapper) MovieKeywords(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieID

	err = runtime.BindStyledParameterWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, ctx.Param("movie_id"), &movieId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MovieKeywords(ctx, movieId)
	return err
}

// MovieSimilar converts echo context to params.
func (w *ServerInterfaceWrapper) MovieSimilar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "movie_id" -------------
	var movieId MovieID

	err = runtime.BindStyledParameterWithLocation("simple", false, "movie_id", runtime.ParamLocationPath, ctx.Param("movie_id"), &movieId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter movie_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MovieSimilarParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MovieSimilar(ctx, movieId, params)
	return err
}

// SearchKeyword converts echo context to params.
func (w *ServerInterfaceWrapper) SearchKeyword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchKeywordParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchKeyword(ctx, params)
	return err
}

// SearchMovie converts echo context to params.
func (w *ServerInterfaceWrapper) SearchMovie(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchMovieParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "primary_release_year" -------------

	err = runtime.BindQueryParameter("form", true, false, "primary_release_year", ctx.QueryParams(), &params.PrimaryReleaseYear)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter primary_release_year: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "region" -------------

	err = runtime.BindQueryParameter("form", true, false, "region", ctx.QueryParams(), &params.Region)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter region: %s", err))
	}

	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchMovie(ctx, params)
	return err
}

// SearchMulti converts echo context to params.
func (w *ServerInterfaceWrapper) SearchMulti(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchMultiParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchMulti(ctx, params)
	return err
}

// SearchPerson converts echo context to params.
func (w *ServerInterfaceWrapper) SearchPerson(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchPersonParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchPerson(ctx, params)
	return err
}

// SearchTV converts echo context to params.
func (w *ServerInterfaceWrapper) SearchTV(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchTVParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "first_air_date_year" -------------

	err = runtime.BindQueryParameter("form", true, false, "first_air_date_year", ctx.QueryParams(), &params.FirstAirDateYear)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first_air_date_year: %s", err))
	}

	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchTV(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/company/:company_id", wrapper.CompanyDetails)
	router.GET(baseURL+"/company/:company_id/images", wrapper.CompanyImages)
	router.GET(baseURL+"/configuration", wrapper.ConfigurationDetails)
	router.GET(baseURL+"/configuration/countries", wrapper.ConfigurationCountries)
	router.GET(baseURL+"/configuration/jobs", wrapper.ConfigurationJobs)
	router.GET(baseURL+"/configuration/languages", wrapper.ConfigurationLanguages)
	router.GET(baseURL+"/configuration/primary_translations", wrapper.ConfigurationPrimaryTranslations)
	router.GET(baseURL+"/configuration/timezones", wrapper.ConfigurationTimezones)
	router.GET(baseURL+"/genre/movie/list", wrapper.GenreMovieList)
	router.GET(baseURL+"/genre/tv/list", wrapper.GenreTvList)
	router.GET(baseURL+"/keyword/:keyword_id", wrapper.KeywordDetails)
	router.GET(baseURL+"/keyword/:keyword_id/movies", wrapper.KeywordMovies)
	router.GET(baseURL+"/movie/now_playing", wrapper.MovieNowPlayingList)
	router.GET(baseURL+"/movie/popular", wrapper.MoviePopularList)
	router.GET(baseURL+"/movie/top_rated", wrapper.MovieTopRatedList)
	router.GET(baseURL+"/movie/upcoming", wrapper.MovieUpcomingList)
	router.GET(baseURL+"/movie/:movie_id/keywords", wrapper.MovieKeywords)
	router.GET(baseURL+"/movie/:movie_id/similar", wrapper.MovieSimilar)
	router.GET(baseURL+"/search/keyword", wrapper.SearchKeyword)
	router.GET(baseURL+"/search/movie", wrapper.SearchMovie)
	router.GET(baseURL+"/search/multi", wrapper.SearchMulti)
	router.GET(baseURL+"/search/person", wrapper.SearchPerson)
	router.GET(baseURL+"/search/tv", wrapper.SearchTV)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LrxJhvrt6tv/CwAA///plE3/sIIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
