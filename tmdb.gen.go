// Package tmdb provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package tmdb

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Country defines model for Country.
type Country struct {
	EnglishName string `json:"english_name"`

	// Iso31661 ISO 3166-1 tag
	Iso31661   string  `json:"iso_3166_1"`
	NativeName *string `json:"native_name,omitempty"`
}

// Department defines model for Department.
type Department struct {
	// Department The name of the department
	Department string   `json:"department"`
	Jobs       []string `json:"jobs"`
}

// Error defines model for Error.
type Error struct {
	StatusCode    int32  `json:"status_code"`
	StatusMessage string `json:"status_message"`
	Success       bool   `json:"success"`
}

// Language defines model for Language.
type Language struct {
	EnglishName string `json:"english_name"`

	// Iso6391 ISO 3166-1 tag
	Iso6391 string  `json:"iso_639_1"`
	Name    *string `json:"name,omitempty"`
}

// MovieBase defines model for MovieBase.
type MovieBase struct {
	Adult            *bool    `json:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty"`
	GenreIds         *[]int32 `json:"genre_ids,omitempty"`
	Id               int      `json:"id"`
	OriginalLanguage string   `json:"original_language"`
	OriginalTitle    string   `json:"original_title"`
	Overview         *string  `json:"overview,omitempty"`
	Popularity       *float32 `json:"popularity,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty"`
	Title            string   `json:"title"`
	Video            *bool    `json:"video,omitempty"`
	VoteAverage      *float32 `json:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty"`
}

// Object defines model for Object.
type Object struct {
	Id   int32  `json:"id"`
	Name string `json:"name"`
}

// IncludeAdult defines model for IncludeAdult.
type IncludeAdult = bool

// KeywordID defines model for KeywordID.
type KeywordID = int32

// LanguageParam defines model for LanguageParam.
type LanguageParam = string

// Page defines model for Page.
type Page = int32

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ConfigurationCountriesParams defines parameters for ConfigurationCountries.
type ConfigurationCountriesParams struct {
	// Language Pass a ISO 639-1 value to display translated data for the fields that support it.
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreMovieListParams defines parameters for GenreMovieList.
type GenreMovieListParams struct {
	// Language Pass a ISO 639-1 value to display translated data for the fields that support it.
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// GenreTvListParams defines parameters for GenreTvList.
type GenreTvListParams struct {
	// Language Pass a ISO 639-1 value to display translated data for the fields that support it.
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
}

// KeywordMoviesParams defines parameters for KeywordMovies.
type KeywordMoviesParams struct {
	IncludeAdult *IncludeAdult `form:"include_adult,omitempty" json:"include_adult,omitempty"`

	// Language Pass a ISO 639-1 value to display translated data for the fields that support it.
	Language *LanguageParam `form:"language,omitempty" json:"language,omitempty"`
	Page     *Page          `form:"page,omitempty" json:"page,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ConfigurationDetails request
	ConfigurationDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationCountries request
	ConfigurationCountries(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationJobs request
	ConfigurationJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationLanguages request
	ConfigurationLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationPrimaryTranslations request
	ConfigurationPrimaryTranslations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigurationTimezones request
	ConfigurationTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenreMovieList request
	GenreMovieList(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenreTvList request
	GenreTvList(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeywordDetails request
	KeywordDetails(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// KeywordMovies request
	KeywordMovies(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ConfigurationDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationCountries(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationCountriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationJobsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationLanguagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationPrimaryTranslations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationPrimaryTranslationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigurationTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigurationTimezonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenreMovieList(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenreMovieListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenreTvList(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenreTvListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeywordDetails(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeywordDetailsRequest(c.Server, keywordId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) KeywordMovies(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewKeywordMoviesRequest(c.Server, keywordId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewConfigurationDetailsRequest generates requests for ConfigurationDetails
func NewConfigurationDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationCountriesRequest generates requests for ConfigurationCountries
func NewConfigurationCountriesRequest(server string, params *ConfigurationCountriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationJobsRequest generates requests for ConfigurationJobs
func NewConfigurationJobsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationLanguagesRequest generates requests for ConfigurationLanguages
func NewConfigurationLanguagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationPrimaryTranslationsRequest generates requests for ConfigurationPrimaryTranslations
func NewConfigurationPrimaryTranslationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/primary_translations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigurationTimezonesRequest generates requests for ConfigurationTimezones
func NewConfigurationTimezonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/configuration/timezones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenreMovieListRequest generates requests for GenreMovieList
func NewGenreMovieListRequest(server string, params *GenreMovieListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genre/movie/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenreTvListRequest generates requests for GenreTvList
func NewGenreTvListRequest(server string, params *GenreTvListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genre/tv/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeywordDetailsRequest generates requests for KeywordDetails
func NewKeywordDetailsRequest(server string, keywordId KeywordID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyword/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewKeywordMoviesRequest generates requests for KeywordMovies
func NewKeywordMoviesRequest(server string, keywordId KeywordID, params *KeywordMoviesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, keywordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/keyword/%s/movies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeAdult != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_adult", runtime.ParamLocationQuery, *params.IncludeAdult); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ConfigurationDetails request
	ConfigurationDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationDetailsResponse, error)

	// ConfigurationCountries request
	ConfigurationCountriesWithResponse(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*ConfigurationCountriesResponse, error)

	// ConfigurationJobs request
	ConfigurationJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationJobsResponse, error)

	// ConfigurationLanguages request
	ConfigurationLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationLanguagesResponse, error)

	// ConfigurationPrimaryTranslations request
	ConfigurationPrimaryTranslationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationPrimaryTranslationsResponse, error)

	// ConfigurationTimezones request
	ConfigurationTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationTimezonesResponse, error)

	// GenreMovieList request
	GenreMovieListWithResponse(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*GenreMovieListResponse, error)

	// GenreTvList request
	GenreTvListWithResponse(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*GenreTvListResponse, error)

	// KeywordDetails request
	KeywordDetailsWithResponse(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*KeywordDetailsResponse, error)

	// KeywordMovies request
	KeywordMoviesWithResponse(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*KeywordMoviesResponse, error)
}

type ConfigurationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ChangeKeys []string `json:"change_keys"`
		Images     struct {
			BackdropSizes []string `json:"backdrop_sizes"`
			BaseUrl       string   `json:"base_url"`
			LogoSizes     []string `json:"logo_sizes"`
			PosterSizes   []string `json:"poster_sizes"`
			ProfileSizes  []string `json:"profile_sizes"`
			SecureBaseUrl string   `json:"secure_base_url"`
			StillSizes    []string `json:"still_sizes"`
		} `json:"images"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Country
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Department
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Language
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationPrimaryTranslationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationPrimaryTranslationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationPrimaryTranslationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigurationTimezonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Iso31661 ISO 3166-1 tag
		Iso31661 string   `json:"iso_3166_1"`
		Zones    []string `json:"zones"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r ConfigurationTimezonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigurationTimezonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenreMovieListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Object
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GenreMovieListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenreMovieListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenreTvListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Object
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GenreTvListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenreTvListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeywordDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r KeywordDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeywordDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type KeywordMoviesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id           *int32       `json:"id,omitempty"`
		Page         *int32       `json:"page,omitempty"`
		Results      *[]MovieBase `json:"results,omitempty"`
		TotalPages   *int32       `json:"total_pages,omitempty"`
		TotalResults *int32       `json:"total_results,omitempty"`
	}
	JSON401 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r KeywordMoviesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r KeywordMoviesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ConfigurationDetailsWithResponse request returning *ConfigurationDetailsResponse
func (c *ClientWithResponses) ConfigurationDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationDetailsResponse, error) {
	rsp, err := c.ConfigurationDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationDetailsResponse(rsp)
}

// ConfigurationCountriesWithResponse request returning *ConfigurationCountriesResponse
func (c *ClientWithResponses) ConfigurationCountriesWithResponse(ctx context.Context, params *ConfigurationCountriesParams, reqEditors ...RequestEditorFn) (*ConfigurationCountriesResponse, error) {
	rsp, err := c.ConfigurationCountries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationCountriesResponse(rsp)
}

// ConfigurationJobsWithResponse request returning *ConfigurationJobsResponse
func (c *ClientWithResponses) ConfigurationJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationJobsResponse, error) {
	rsp, err := c.ConfigurationJobs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationJobsResponse(rsp)
}

// ConfigurationLanguagesWithResponse request returning *ConfigurationLanguagesResponse
func (c *ClientWithResponses) ConfigurationLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationLanguagesResponse, error) {
	rsp, err := c.ConfigurationLanguages(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationLanguagesResponse(rsp)
}

// ConfigurationPrimaryTranslationsWithResponse request returning *ConfigurationPrimaryTranslationsResponse
func (c *ClientWithResponses) ConfigurationPrimaryTranslationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationPrimaryTranslationsResponse, error) {
	rsp, err := c.ConfigurationPrimaryTranslations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationPrimaryTranslationsResponse(rsp)
}

// ConfigurationTimezonesWithResponse request returning *ConfigurationTimezonesResponse
func (c *ClientWithResponses) ConfigurationTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigurationTimezonesResponse, error) {
	rsp, err := c.ConfigurationTimezones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigurationTimezonesResponse(rsp)
}

// GenreMovieListWithResponse request returning *GenreMovieListResponse
func (c *ClientWithResponses) GenreMovieListWithResponse(ctx context.Context, params *GenreMovieListParams, reqEditors ...RequestEditorFn) (*GenreMovieListResponse, error) {
	rsp, err := c.GenreMovieList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenreMovieListResponse(rsp)
}

// GenreTvListWithResponse request returning *GenreTvListResponse
func (c *ClientWithResponses) GenreTvListWithResponse(ctx context.Context, params *GenreTvListParams, reqEditors ...RequestEditorFn) (*GenreTvListResponse, error) {
	rsp, err := c.GenreTvList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenreTvListResponse(rsp)
}

// KeywordDetailsWithResponse request returning *KeywordDetailsResponse
func (c *ClientWithResponses) KeywordDetailsWithResponse(ctx context.Context, keywordId KeywordID, reqEditors ...RequestEditorFn) (*KeywordDetailsResponse, error) {
	rsp, err := c.KeywordDetails(ctx, keywordId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeywordDetailsResponse(rsp)
}

// KeywordMoviesWithResponse request returning *KeywordMoviesResponse
func (c *ClientWithResponses) KeywordMoviesWithResponse(ctx context.Context, keywordId KeywordID, params *KeywordMoviesParams, reqEditors ...RequestEditorFn) (*KeywordMoviesResponse, error) {
	rsp, err := c.KeywordMovies(ctx, keywordId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseKeywordMoviesResponse(rsp)
}

// ParseConfigurationDetailsResponse parses an HTTP response from a ConfigurationDetailsWithResponse call
func ParseConfigurationDetailsResponse(rsp *http.Response) (*ConfigurationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ChangeKeys []string `json:"change_keys"`
			Images     struct {
				BackdropSizes []string `json:"backdrop_sizes"`
				BaseUrl       string   `json:"base_url"`
				LogoSizes     []string `json:"logo_sizes"`
				PosterSizes   []string `json:"poster_sizes"`
				ProfileSizes  []string `json:"profile_sizes"`
				SecureBaseUrl string   `json:"secure_base_url"`
				StillSizes    []string `json:"still_sizes"`
			} `json:"images"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationCountriesResponse parses an HTTP response from a ConfigurationCountriesWithResponse call
func ParseConfigurationCountriesResponse(rsp *http.Response) (*ConfigurationCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Country
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationJobsResponse parses an HTTP response from a ConfigurationJobsWithResponse call
func ParseConfigurationJobsResponse(rsp *http.Response) (*ConfigurationJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationLanguagesResponse parses an HTTP response from a ConfigurationLanguagesWithResponse call
func ParseConfigurationLanguagesResponse(rsp *http.Response) (*ConfigurationLanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Language
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationPrimaryTranslationsResponse parses an HTTP response from a ConfigurationPrimaryTranslationsWithResponse call
func ParseConfigurationPrimaryTranslationsResponse(rsp *http.Response) (*ConfigurationPrimaryTranslationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationPrimaryTranslationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseConfigurationTimezonesResponse parses an HTTP response from a ConfigurationTimezonesWithResponse call
func ParseConfigurationTimezonesResponse(rsp *http.Response) (*ConfigurationTimezonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigurationTimezonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Iso31661 ISO 3166-1 tag
			Iso31661 string   `json:"iso_3166_1"`
			Zones    []string `json:"zones"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGenreMovieListResponse parses an HTTP response from a GenreMovieListWithResponse call
func ParseGenreMovieListResponse(rsp *http.Response) (*GenreMovieListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenreMovieListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGenreTvListResponse parses an HTTP response from a GenreTvListWithResponse call
func ParseGenreTvListResponse(rsp *http.Response) (*GenreTvListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenreTvListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseKeywordDetailsResponse parses an HTTP response from a KeywordDetailsWithResponse call
func ParseKeywordDetailsResponse(rsp *http.Response) (*KeywordDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeywordDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseKeywordMoviesResponse parses an HTTP response from a KeywordMoviesWithResponse call
func ParseKeywordMoviesResponse(rsp *http.Response) (*KeywordMoviesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &KeywordMoviesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id           *int32       `json:"id,omitempty"`
			Page         *int32       `json:"page,omitempty"`
			Results      *[]MovieBase `json:"results,omitempty"`
			TotalPages   *int32       `json:"total_pages,omitempty"`
			TotalResults *int32       `json:"total_results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Details
	// (GET /configuration)
	ConfigurationDetails(ctx echo.Context) error
	// Countries
	// (GET /configuration/countries)
	ConfigurationCountries(ctx echo.Context, params ConfigurationCountriesParams) error
	// Jobs
	// (GET /configuration/jobs)
	ConfigurationJobs(ctx echo.Context) error
	// Languages
	// (GET /configuration/languages)
	ConfigurationLanguages(ctx echo.Context) error
	// Primary Translations
	// (GET /configuration/primary_translations)
	ConfigurationPrimaryTranslations(ctx echo.Context) error
	// Timezones
	// (GET /configuration/timezones)
	ConfigurationTimezones(ctx echo.Context) error
	// Movie List
	// (GET /genre/movie/list)
	GenreMovieList(ctx echo.Context, params GenreMovieListParams) error
	// TV List
	// (GET /genre/tv/list)
	GenreTvList(ctx echo.Context, params GenreTvListParams) error
	// Details
	// (GET /keyword/{keyword_id})
	KeywordDetails(ctx echo.Context, keywordId KeywordID) error
	// Movies
	// (GET /keyword/{keyword_id}/movies)
	KeywordMovies(ctx echo.Context, keywordId KeywordID, params KeywordMoviesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ConfigurationDetails converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationDetails(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationDetails(ctx)
	return err
}

// ConfigurationCountries converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationCountries(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfigurationCountriesParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationCountries(ctx, params)
	return err
}

// ConfigurationJobs converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationJobs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationJobs(ctx)
	return err
}

// ConfigurationLanguages converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationLanguages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationLanguages(ctx)
	return err
}

// ConfigurationPrimaryTranslations converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationPrimaryTranslations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationPrimaryTranslations(ctx)
	return err
}

// ConfigurationTimezones converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigurationTimezones(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigurationTimezones(ctx)
	return err
}

// GenreMovieList converts echo context to params.
func (w *ServerInterfaceWrapper) GenreMovieList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenreMovieListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenreMovieList(ctx, params)
	return err
}

// GenreTvList converts echo context to params.
func (w *ServerInterfaceWrapper) GenreTvList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenreTvListParams
	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenreTvList(ctx, params)
	return err
}

// KeywordDetails converts echo context to params.
func (w *ServerInterfaceWrapper) KeywordDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyword_id" -------------
	var keywordId KeywordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, ctx.Param("keyword_id"), &keywordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KeywordDetails(ctx, keywordId)
	return err
}

// KeywordMovies converts echo context to params.
func (w *ServerInterfaceWrapper) KeywordMovies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyword_id" -------------
	var keywordId KeywordID

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyword_id", runtime.ParamLocationPath, ctx.Param("keyword_id"), &keywordId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params KeywordMoviesParams
	// ------------- Optional query parameter "include_adult" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_adult", ctx.QueryParams(), &params.IncludeAdult)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_adult: %s", err))
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", ctx.QueryParams(), &params.Language)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter language: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.KeywordMovies(ctx, keywordId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/configuration", wrapper.ConfigurationDetails)
	router.GET(baseURL+"/configuration/countries", wrapper.ConfigurationCountries)
	router.GET(baseURL+"/configuration/jobs", wrapper.ConfigurationJobs)
	router.GET(baseURL+"/configuration/languages", wrapper.ConfigurationLanguages)
	router.GET(baseURL+"/configuration/primary_translations", wrapper.ConfigurationPrimaryTranslations)
	router.GET(baseURL+"/configuration/timezones", wrapper.ConfigurationTimezones)
	router.GET(baseURL+"/genre/movie/list", wrapper.GenreMovieList)
	router.GET(baseURL+"/genre/tv/list", wrapper.GenreTvList)
	router.GET(baseURL+"/keyword/:keyword_id", wrapper.KeywordDetails)
	router.GET(baseURL+"/keyword/:keyword_id/movies", wrapper.KeywordMovies)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
